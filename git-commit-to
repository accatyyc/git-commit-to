#!/bin/sh

# Abort if any command fails
set -e

# Make sure the user entered a branch
if [ -z "$1" ]; then
	echo "Usage: git commit-to branch-name"
	exit 1
fi

# Make sure target branch exists
if test -z $(git rev-parse --quiet --verify "$1"); then
	echo "Error: Couldn't find a branch named '$1'."
	exit 1
fi

# Store the current branch
orig_branch=$(git rev-parse --abbrev-ref HEAD)

# Commit and store the hash for future use
git commit --quiet
commit=$(git rev-parse HEAD)

# Stash any eventual other changes
unstaged_files=$(git ls-files --exclude-standard --others)
if ! git diff-files --quiet || ! test -z ${unstaged_files}; then
	git stash save --include-untracked --quiet
	stash=1
fi

# Checkout the target branch and cherry-pick the commit
git checkout --quiet $1
git cherry-pick ${commit}

# Go back to the original branch and remove the commit
git checkout --quiet ${orig_branch}
git reset --quiet --hard HEAD~1

# If there were changes stashed, pop them
if ! [ -z $stash ]; then
	git stash pop --quiet
fi
